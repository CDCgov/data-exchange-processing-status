openapi: 3.0.1
info:
  title: PHDO Processing Status API
  description: |
    Swagger definition of the Public Health Data Observability (PHDO) Processing Status (PS) API.
    ## Overview
    ### What it does:
    -  Standardized report capture with advanced query options
    -  Emitting configurable notifications, which could be used to facilitate workflow management or success/fail observability for uploads
    ### What it doesnâ€™t do:
    -  Workflow management
    -  Access control layer
    
    ## Functionality
    The processing status API provides two areas of functionality: reports, queries, and notifications.
      * **Reports** - Reports are used to provide feedback whenever one of the processing pipeline stages has warnings, errors, or fails.  There can be more than one processing report for the processing pipeline.  For example, there may be warnings on the structure validation, which reports to the processing API, but the file is allowed to continue processing.  The next stage, content validation, may then have some critical failures that cause the pipeline to stop, which is provided in a second report.    
      * **Queries** - Queries provide a mechanism to ask questions about processing status using GraphQL, a flexible data query and manipulation language that allows a client to specify what data it wants. Queries can provide a wide range of insights, from the status of an upload to the number of uploads for a given data stream over a period of time.  Also available are queries to provide data analysis, such as discovering duplicate file uploads, counts of error messages by type, counts of file uploads by data stream, and more.
      * **Notifications** - Notifications define the methods and filters used to provide feedback to listeners.  Notification setups need to be established and once created persist until cancelled by the listener.  Notification listeners will provide a request to indicate what type of notification they want such as a webhook HTTP call whenever a relevant event occurs. Notifications may be fired for a report as they are generated or fired when the pipeline concludes.  If the latter, the entire collection of reports is provided all at once, whether because of a failure or it completed successfully.
    
    ## REST Endpoints
    The majority of the interface for the PS API is through its GraphQL interface, not the REST API described here.
    The REST API is limited to basic information about the service's health and the version.  Each PS API service provides this
    same REST interface.
    - `report-sink` - Service to accept and validate incoming reports on a messaging system
    - `graphql` - The GraphQL service, which is the main interface for doing queries, ingesting reports, as well as managing notification subscriptions.
    - `notifications-rules-engine` - Service for applying notifications based on business rules
    - `notifications-workflow` - Service for applying notifications based on a schedule that has pre-canned workflows as well as running business rules.

  version: 1.0.0
servers:
  - url: 'https://apidev.cdc.gov/processingstatus'
    description: Development server
  - url: 'https://api.cdc.gov/processingstatus'
    description: Production server
tags:
  - name: Info
    description: Info endpoints about the PS API
security:
  - bearerAuth: []
paths:
  '/health':
    get:
      tags:
        - Info
      summary: Gets the health status of the service.
      description: >-
        Retrieves the health status of the service.
      responses:
        '200':
          description: Health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResult'
  '/version':
    get:
      tags:
        - Info
      summary: Gets the version service.
      description: >-
        Retrieves the version of the service.
      responses:
        '200':
          description: Version info
          content:
            text/plain:
              schema:
                type: string
                example: 1.0.4
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    HealthResult:
      type: object
      properties:
        status:
          type: string
          enum: [ UP, DOWN ]
        totalChecksDuration:
          type: string
          example: 00:00:01.023
        dependencyHealthChecks:
          type: array
          items:
            type: object
            properties:
              service:
                type: string
                example: DynamoDB
              status:
                type: string
                example: UP
              healthIssues:
                type: string
                format: nullable
                example: null
