buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.24'
    id 'io.ktor.plugin' version '2.3.11'
    id "com.gorylenko.gradle-git-properties" version "2.4.2"
}
apply plugin: "java"
apply plugin: "kotlin"

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "17"
    }
}
tasks.register("prepareKotlinBuildScriptModel") { }

group "gov.cdc.ocio"
version "0.0.1"
mainClassName = "gov.cdc.ocio.processingstatusapi.ApplicationKt"

configurations {
    // create a separate configuration for the agent since it should not be a normal dependency
    agent
}

dependencies {
    implementation("io.ktor:ktor-server-core-jvm")
    implementation("io.ktor:ktor-server-netty-jvm")
    implementation "io.ktor:ktor-server-content-negotiation:$ktor_version"
    implementation "io.ktor:ktor-serialization-jackson:$ktor_version"
  //  implementation("ch.qos.logback:logback-classic:$logback_version")
    implementation("com.azure:azure-messaging-servicebus:7.13.3")
    implementation("com.azure:azure-cosmos:4.55.0")
    implementation("com.rabbitmq:amqp-client:5.21.0")
    implementation("aws.sdk.kotlin:sqs:1.0.0")
    implementation "software.amazon.awssdk:sts:2.29.34"
    implementation("io.github.microutils:kotlin-logging-jvm:3.0.5")
    implementation("com.google.code.gson:gson:2.10.1")
    implementation("io.insert-koin:koin-core:3.5.6")
    implementation("io.insert-koin:koin-ktor:3.5.6")
    testImplementation("io.ktor:ktor-server-tests-jvm")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version")

    implementation "com.microsoft.azure.functions:azure-functions-java-library:3.0.0"
    implementation 'com.sun.activation:javax.activation:1.2.0'
    implementation 'com.microsoft.azure:applicationinsights-core:3.4.19'
    implementation 'com.azure:azure-cosmos:4.55.0'
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.14.2"
    implementation 'io.opentelemetry:opentelemetry-api:1.29.0'
    implementation 'io.opentelemetry:opentelemetry-sdk:1.29.0'
    implementation 'io.opentelemetry:opentelemetry-exporter-logging:1.29.0'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp:1.29.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation group: 'io.github.microutils', name: 'kotlin-logging-jvm', version: '3.0.5'
    //implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'
  //  implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.7'
    /*implementation group: 'ch.qos.logback.contrib', name: 'logback-json-classic', version: '0.1.5'
    implementation group: 'ch.qos.logback.contrib', name: 'logback-jackson', version: '0.1.5'*/

    implementation 'com.azure:azure-messaging-servicebus:7.15.0'
    implementation 'com.azure:azure-identity:1.8.0'

    implementation 'org.danilopianini:khttp:1.3.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'

    // JSON validations
    implementation("com.networknt:json-schema-validator:1.0.73")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.12.+")

    implementation 'org.owasp.encoder:encoder:1.2.3'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.1'

    implementation project(':libs:commons-database')
    implementation project(':libs:schema-validation')
    implementation project(':libs:commons-types')


    implementation ("net.logstash.logback:logstash-logback-encoder:7.4")
    implementation("io.github.microutils:kotlin-logging-jvm:3.0.5")
    implementation("ch.qos.logback:logback-classic:1.2.11")


    agent "io.opentelemetry.javaagent:opentelemetry-javaagent:1.29.0"

    testImplementation("org.mockito.kotlin:mockito-kotlin:4.0.0")
    testImplementation 'org.testng:testng:7.7.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testImplementation "org.mockito:mockito-inline:3.11.2"
    testImplementation "io.mockk:mockk:1.13.9"
}

test {
    useTestNG()
    testLogging {
        events "passed", "skipped", "failed"
    }
    //Change this to "true" if we want to execute unit tests
    systemProperty("isTestEnvironment", "false")

    // Set the test classpath, if required
}

jib {
    from {
        auth {
            username = System.getenv("DOCKERHUB_USERNAME") ?: ""
            password = System.getenv("DOCKERHUB_TOKEN") ?: ""
        }
    }
    to {
        image = 'imagehub.cdc.gov:6989/dex/pstatus/report-sink-service'
        tags = [ System.getenv("IMAGE_TAG") ?: "latest" ]
        auth {
            username = System.getenv("IMAGEHUB_USERNAME") ?: ""
            password = System.getenv("IMAGEHUB_PASSWORD") ?: ""
        }
    }
}
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

kotlin {
    jvmToolchain(17)
}
repositories {
    mavenCentral()
}

gitProperties {
    keys = ["git.commit.id", "git.commit.id.abbrev", "git.branch", "git.build.time", "git.commit.time"]
    dateFormat = "yyyy-MM-dd'T'HH:mm:ssZ"
    dateFormatTimeZone = "UTC"
    extProperty = "gitProps"
}

// make sure the generateGitProperties task always executes (even when git.properties is not changed)
generateGitProperties.outputs.upToDateWhen { false }