package gov.cdc.ocio.processingstatusapi.models.reports.inputs

import com.expediagroup.graphql.generator.annotations.GraphQLDescription
import com.google.gson.annotations.SerializedName
import java.time.OffsetDateTime

@GraphQLDescription("Input type for creating or updating a report")
data class ReportInput(
    @GraphQLDescription("Unique identifier automatically generated by database when a report is persisted.")
    @SerializedName("id")
    val id: String? = null,

    @GraphQLDescription("Unique upload identifier associated with this report.")
    @SerializedName("upload_id")
    val uploadId: String? = null,

    @GraphQLDescription("Unique identifier for the report")
    @SerializedName("report_id")
    val reportId: String? = null,

    @GraphQLDescription("Data stream identifier")
    @SerializedName("data_stream_id")
    val dataStreamId: String? = null,

    @GraphQLDescription("Data stream route")
    @SerializedName("data_stream_route")
    val dataStreamRoute: String? = null,

    @GraphQLDescription("Timestamp of when the file was uploaded")
    @SerializedName("dex_ingest_datetime")
    val dexIngestDateTime: OffsetDateTime? = null,

    @GraphQLDescription("Message metadata")
    @SerializedName("message_metadata")
    val messageMetadata: MessageMetadataInput? = null,

    @GraphQLDescription("Describes the stage that is providing this report")
    @SerializedName("stage_info")
    val stageInfo: StageInfoInput? = null,

    @GraphQLDescription("Optional tag(s) associated with this report")
    @SerializedName("tags")
    val tags: Map<String,String>? = null,

    @GraphQLDescription("Optional data associated with this report")
    @SerializedName("data")
    val data: Map<String,String>? = null,

    @GraphQLDescription("MIME content type of the content field; e.g. JSON, XML, PDF, etc")
    @SerializedName("content_type")
    val contentType: String? = null,

    @GraphQLDescription("Jurisdiction the report is associated with")
    @SerializedName("jurisdiction")
    val jurisdiction: String? = null,

    @GraphQLDescription("Unique identifier of the sender of this data which could be an intermediary")
    @SerializedName("sender_id")
    val senderId: String? = null,

    @GraphQLDescription("Unique identifier of the entity that actually created the data this report pertains to")
    @SerializedName("data_producer_id")
    val dataProducerId: String? = null,

    @GraphQLDescription("Content of the report. If the report is JSON then the content will be a map, otherwise, it will be a string")
    var content : String? = null,

    @GraphQLDescription("Timestamp when the report was recorded in the database")
    @SerializedName("timestamp")
    val timestamp: OffsetDateTime? = null
)