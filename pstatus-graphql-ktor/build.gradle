buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.24'
    id 'io.ktor.plugin' version '2.3.11'
    id "org.jetbrains.kotlin.plugin.serialization" version "1.8.20"
    id "com.gorylenko.gradle-git-properties" version "2.4.2"
}
apply plugin: "java"
apply plugin: "kotlin"

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "17"
    }
}

group "gov.cdc.ocio"
version "0.0.1"

configurations {
    // create a separate configuration for the agent since it should not be a normal dependency
    agent
}
application {
    mainClass.set("gov.cdc.ocio.processingstatusapi.ApplicationKt")
}
repositories{
    mavenLocal()
    mavenCentral()
}

tasks.register("prepareKotlinBuildScriptModel"){}
dependencies {
    implementation(project(":libs:commons-database"))
    implementation project(':libs:schema-validation')
    implementation project(':libs:commons-types')
    implementation "io.ktor:ktor-server-core-jvm:$ktor_version"
    implementation "io.ktor:ktor-server-netty-jvm:$ktor_version"
    implementation "io.ktor:ktor-server-cors:$ktor_version"
    implementation "io.ktor:ktor-server-status-pages:$ktor_version"
    implementation "io.ktor:ktor-server-auth:$ktor_version"
    implementation "io.ktor:ktor-server-auth-jwt:$ktor_version"
    implementation "io.ktor:ktor-server-content-negotiation:$ktor_version"
    implementation "io.ktor:ktor-serialization-jackson:$ktor_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation("io.ktor:ktor-server-content-negotiation:2.1.0")
    implementation("io.ktor:ktor-serialization-kotlinx-json:2.1.0")
    implementation("io.ktor:ktor-client-core:2.1.0")
    implementation("io.ktor:ktor-client-cio:2.1.0")
    implementation("io.ktor:ktor-client-content-negotiation:2.1.0")
    implementation("io.ktor:ktor-client-serialization:2.1.0")
    implementation 'com.expediagroup:graphql-kotlin-ktor-server:8.2.1'
    implementation 'io.github.microutils:kotlin-logging-jvm:3.0.5'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'io.insert-koin:koin-core:3.5.6'
    implementation 'io.insert-koin:koin-ktor:3.5.6'
    implementation 'com.graphql-java:graphql-java-extended-scalars:22.0'
    implementation 'joda-time:joda-time:2.12.7'
    implementation 'org.apache.commons:commons-lang3:3.3.1'
    implementation "com.expediagroup:graphql-kotlin-server:8.2.1"
    implementation "com.expediagroup:graphql-kotlin-schema-generator:8.2.1"
    implementation "io.ktor:ktor-server-netty:2.1.0"
    implementation "io.ktor:ktor-client-content-negotiation:2.1.0"
    implementation "io.ktor:ktor-client-logging:2.1.0"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0"
    implementation("com.fasterxml.jackson.core:jackson-databind:2.18.2")
    implementation "software.amazon.awssdk:sts:2.29.34"

    implementation project(':libs:commons-database')
    implementation project(':libs:commons-types')

    //LOKI
    implementation ("net.logstash.logback:logstash-logback-encoder:7.4")
    implementation("io.github.microutils:kotlin-logging-jvm:3.0.5")
    implementation("ch.qos.logback:logback-classic:1.2.11")

    testImplementation "io.ktor:ktor-server-tests-jvm:$ktor_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.1"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.8.1"
    testImplementation "org.mockito:mockito-core:4.5.1"
    testImplementation "org.mockito:mockito-inline:4.5.1"
    testImplementation "io.mockk:mockk:1.13.9"
    testImplementation 'io.insert-koin:koin-test:3.4.3'
}

ktor {
    docker {
        localImageName.set("pstatus-graphql-ktor")
    }
}

jib {
    from {
        auth {
            username = System.getenv("DOCKERHUB_USERNAME") ?: ""
            password = System.getenv("DOCKERHUB_TOKEN") ?: ""
        }
    }
    to {
        image = 'imagehub.cdc.gov:6989/dex/pstatus/graphql-service'
        tags = [ System.getenv("IMAGE_TAG") ?: "latest" ]
        auth {
            username = System.getenv("IMAGEHUB_USERNAME") ?: ""
            password = System.getenv("IMAGEHUB_PASSWORD") ?: ""
        }
    }
}

test {

    // Discover and execute JUnit Platform-based (JUnit 5, JUnit Jupiter) tests
    // JUnit 5 has the ability to execute JUnit 4 tests as well
    useJUnitPlatform()

    //Change this to "true" if we want to execute unit tests
    systemProperty("isTestEnvironment", "false")

    // Set the test classpath, if required
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}


kotlin {
    jvmToolchain(17)
}

sourceSets {
    main {
        java {
            srcDir 'src/kotlin'
        }
        resources {
            srcDir 'src/resources'
        }
    }
    test {
        java {
            srcDir 'src/kotlin'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}

gitProperties {
    keys = ["git.commit.id", "git.commit.id.abbrev", "git.branch", "git.build.time", "git.commit.time"]
    dateFormat = "yyyy-MM-dd'T'HH:mm:ssZ"
    dateFormatTimeZone = "UTC"
    extProperty = "gitProps"
}

// make sure the generateGitProperties task always executes (even when git.properties is not changed)
generateGitProperties.outputs.upToDateWhen { false }

tasks.register('wrapper', Wrapper) {
    gradleVersion = 8.6
    distributionType = Wrapper.DistributionType.ALL // Includes JavaDoc and source code
    validateDistributionUrl = false
}