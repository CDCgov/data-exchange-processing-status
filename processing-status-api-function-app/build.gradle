buildscript {
    ext.kotlin_version = "1.8.10"
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
plugins {
    id "com.microsoft.azure.azurefunctions" version "1.12.1"
}
apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "jacoco"

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

group "gov.cdc.ocio"
version "1.0.0-SNAPSHOT"

configurations {
    // create a separate configuration for the agent since it should not be a normal dependency
    agent
}

dependencies {
    implementation "com.microsoft.azure.functions:azure-functions-java-library:3.0.0"
    implementation 'com.microsoft.azure:applicationinsights-core:3.4.19'
    implementation 'com.azure:azure-cosmos:4.55.0'
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.14.2"
    implementation 'io.opentelemetry:opentelemetry-api:1.29.0'
    implementation 'io.opentelemetry:opentelemetry-sdk:1.29.0'
    implementation 'io.opentelemetry:opentelemetry-exporter-logging:1.29.0'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp:1.29.0'
    implementation 'io.opentelemetry:opentelemetry-semconv:1.29.0-alpha'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation group: 'io.github.microutils', name: 'kotlin-logging-jvm', version: '3.0.5'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.11'
    implementation group: 'ch.qos.logback.contrib', name: 'logback-json-classic', version: '0.1.5'
    implementation group: 'ch.qos.logback.contrib', name: 'logback-jackson', version: '0.1.5'

    implementation 'com.azure:azure-messaging-servicebus:7.15.0'
    implementation 'com.microsoft.azure:azure-servicebus:3.6.7'
    implementation 'com.azure:azure-identity:1.8.0'

    implementation 'org.danilopianini:khttp:1.3.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'

    implementation 'org.owasp.encoder:encoder:1.2.3'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.1'

    agent "io.opentelemetry.javaagent:opentelemetry-javaagent:1.29.0"

    testImplementation("org.mockito.kotlin:mockito-kotlin:4.0.0")
    testImplementation "org.testng:testng:7.4.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testImplementation "org.mockito:mockito-inline:3.11.2"
    testImplementation "io.mockk:mockk:1.12.0"
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

repositories {
    mavenCentral()
}

test {
    useTestNG()
    testLogging {
        events "passed", "skipped", "failed"
    }
    // Set the test classpath, if required
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = file("$buildDir/jacocoXml")
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    reports {
        html.required = true
        xml.required = true
        html.destination file("$buildDir/jacocoHtml")
    }
    afterEvaluate{
        classDirectories.setFrom(files(classDirectories.files.collect{
            fileTree(dir: it, exclude: ["**/gov/cdc/ocio/processingstatusapi/opentelemetry/**",
                                        "**/gov/cdc/ocio/processingstatusapi/cosmos/**"])
        }))
    }
}
azurefunctions {
    subscription = System.getenv("AZURE_SUBSCRIPTION")
    resourceGroup = System.getenv("RESOURCE_GROUP")
    appName = System.getenv("FUNCTION_NAME")
    allowTelemetry = 'false'
    runtime {
        os = 'linux'
    }
    auth {
        client = System.getenv("AZURE_CLIENT_ID")
        tenant = System.getenv("AZURE_TENANT_ID")
        key = System.getenv("AZURE_SECRET")
        environment = 'AZURE'
    }
    localDebug = "transport=dt_socket,server=y,suspend=n,address=5005"
    deployment {
        type = 'run_from_blob'
    }
}