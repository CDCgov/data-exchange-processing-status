buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
plugins {
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id 'io.ktor.plugin' version '2.3.11'
    id "com.gorylenko.gradle-git-properties" version "2.4.2"
}
apply plugin: "java"
apply plugin: "kotlin"

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "17"
    }
}
tasks.register("prepareKotlinBuildScriptModel") { }


group "gov.cdc.ocio"
version "0.0.1"
mainClassName = "gov.cdc.ocio.processingstatusnotifications.ApplicationKt"

dependencies {
    implementation "io.ktor:ktor-server-core:2.3.2"
    implementation "io.ktor:ktor-server-netty:2.3.2"
    implementation("io.ktor:ktor-client-cio:$ktor_version")
    implementation "io.ktor:ktor-server-content-negotiation:2.3.2"
    implementation "io.ktor:ktor-server-status-pages:2.3.2"
    implementation "io.ktor:ktor-serialization-jackson:$ktor_version"
    implementation "io.ktor:ktor-serialization-kotlinx-json:2.3.2"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.2"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.7.2"
    implementation "io.github.microutils:kotlin-logging-jvm:3.0.5"
    implementation "com.google.code.gson:gson:2.10.1"
    implementation 'io.github.microutils:kotlin-logging-jvm:3.0.5'
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'ch.qos.logback:logback-classic:1.4.12'
    implementation 'ch.qos.logback.contrib:logback-json-classic:0.1.5'
    implementation group: 'ch.qos.logback.contrib', name: 'logback-jackson', version: '0.1.5'
    implementation "io.insert-koin:koin-core:3.5.6"
    implementation "io.insert-koin:koin-ktor:3.5.6"
    implementation 'joda-time:joda-time:2.12.7'
    implementation 'org.apache.commons:commons-lang3:3.3.1'
    implementation "io.ktor:ktor-server-netty:2.1.0"
    implementation "io.ktor:ktor-client-content-negotiation:2.1.0"
    implementation "org.jetbrains.kotlinx:kotlinx-html:$kotlinx_html_version"

    implementation project(":libs:commons-types")
    implementation project(":libs:commons-database")
    implementation project(":libs:message-system")
    implementation project(":libs:notification-dispatchers")

    // Google library used for caching
    implementation("com.google.guava:guava:33.4.0-jre")

    // EasyRules libraries
    implementation("org.jeasy:easy-rules-core:4.1.0")
    implementation("org.jeasy:easy-rules-mvel:4.1.0")
    implementation("org.jeasy:easy-rules-support:4.1.0")

    testImplementation "org.mockito.kotlin:mockito-kotlin:4.0.0"
    testImplementation 'org.testng:testng:7.7.0'
    testImplementation "org.mockito:mockito-inline:3.11.2"
    testImplementation "io.mockk:mockk:1.13.9"
    testImplementation "io.ktor:ktor-server-tests-jvm"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}

jib {
    from {
        auth {
            username = System.getenv("DOCKERHUB_USERNAME") ?: ""
            password = System.getenv("DOCKERHUB_TOKEN") ?: ""
        }
    }

    to {
        image = System.getenv("IMAGE") ?: ""
        tags = [ System.getenv("IMAGE_TAG") ?: "latest" ]
        auth {
            username = System.getenv("USERNAME") ?: ""
            password = System.getenv("PASSWORD") ?: ""
        }
    }
}

test {
    useTestNG()
    testLogging {
        events "passed", "skipped", "failed"
    }
    //Change this to "true" if we want to execute unit tests
    systemProperty("isTestEnvironment", "false")

    // Set the test classpath, if required
}
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

kotlin {
    jvmToolchain(17)
}
repositories{
     mavenCentral()
}

gitProperties {
    keys = ["git.commit.id", "git.commit.id.abbrev", "git.branch", "git.build.time", "git.commit.time"]
    dateFormat = "yyyy-MM-dd'T'HH:mm:ssZ"
    dateFormatTimeZone = "UTC"
    extProperty = "gitProps"
}

// make sure the generateGitProperties task always executes (even when git.properties is not changed)
generateGitProperties.outputs.upToDateWhen { false }