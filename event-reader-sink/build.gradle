buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.24'
    id 'io.ktor.plugin' version '2.3.11'
}
apply plugin: "java"
apply plugin: "kotlin"

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "17"
    }
}

group "gov.cdc.ocio.eventreadersink"
version "0.0.1"
mainClassName = "gov.cdc.ocio.eventreadersink.ApplicationKt"

configurations {
    // create a separate configuration for the agent since it should not be a normal dependency
    agent
}

dependencies {
    implementation("io.ktor:ktor-server-core-jvm")
    implementation("io.ktor:ktor-server-netty-jvm")
    implementation "io.ktor:ktor-server-content-negotiation:$ktor_version"
    implementation "io.ktor:ktor-serialization-jackson:$ktor_version"
    implementation("ch.qos.logback:logback-classic:$logback_version")
    implementation("com.azure:azure-messaging-servicebus:7.13.3")
    implementation("com.azure:azure-cosmos:4.55.0")
    implementation("io.github.microutils:kotlin-logging-jvm:3.0.5")
    implementation("com.google.code.gson:gson:2.10.1")
    implementation("io.insert-koin:koin-core:3.5.6")
    implementation("io.insert-koin:koin-ktor:3.5.6")
    testImplementation("io.ktor:ktor-server-tests-jvm")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version")

    implementation 'com.azure:azure-messaging-servicebus:7.15.0'
    implementation 'com.microsoft.azure:azure-servicebus:3.6.7'
    implementation 'com.azure:azure-identity:1.8.0'

    implementation 'org.danilopianini:khttp:1.3.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'

    implementation 'org.owasp.encoder:encoder:1.2.3'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.1'

    agent "io.opentelemetry.javaagent:opentelemetry-javaagent:1.29.0"

    implementation("org.apache.camel:camel-core:4.8.1")
    implementation("org.apache.camel:camel-azure-storage-blob:4.8.1")
    implementation("org.apache.camel:camel-amqp:4.8.1")
    implementation("com.microsoft.azure:azure-servicebus:3.6.0")
    implementation("com.azure:azure-storage-blob:12.14.0")
    implementation("ch.qos.logback:logback-classic:1.2.11")

    // For AWS Integration
    implementation("org.apache.camel:camel-aws2-s3:4.8.1")
    implementation("org.apache.camel:camel-aws2-sqs:4.8.1")

    // For tests
    testImplementation("io.ktor:ktor-server-tests:$ktor_version")
    testImplementation("io.mockk:mockk:1.12.0")
    testImplementation("org.apache.camel:camel-test-junit5:4.8.1")
    testImplementation("org.junit.jupiter:junit-jupiter:5.8.2")
    testImplementation("org.mockito:mockito-core:4.0.0")
    testImplementation("org.mockito:mockito-inline:4.0.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.8.2")

}

repositories {
    mavenCentral()
}

jib {
    from {
        auth {
            username = System.getenv("DOCKERHUB_USERNAME") ?: ""
            password = System.getenv("DOCKERHUB_TOKEN") ?: ""
        }
    }

    to {
        image = System.getenv("IMAGE") ?: ""
        tags = [ System.getenv("IMAGE_TAG") ?: "latest" ]
        auth {
            username = System.getenv("USERNAME") ?: ""
            password = System.getenv("PASSWORD") ?: ""
        }
    }
}

sourceSets {
    test {
        kotlin.srcDir("src/test/kotlin")
    }
}

tasks.test {
    useJUnitPlatform()

    testLogging {
        events("passed", "skipped", "failed")
        showStandardStreams = true
    }

    //Change this to "true" if we want to execute unit tests
    systemProperty("isTestEnvironment", "true")

    // Set the test classpath, if required
}